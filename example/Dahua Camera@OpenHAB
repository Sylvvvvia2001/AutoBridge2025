#logic code

public class DahuaControl {
    private IpCameraHandler ipCameraHandler;
    private String nvrChannel;

    public DahuaControl(IpCameraHandler handler, String nvrChannel) {
        ipCameraHandler = handler;
        this.nvrChannel = nvrChannel;
    }

    public void handleCommand(String channelId, String command) {
        switch (channelId) {
            case "CHANNEL_TEXT_OVERLAY":
                String text = encodeSpecialChars(command);
                if ("".equals(text)) {
                    ipCameraHandler.sendHttpGET("/cgi-bin/configManager.cgi?action=setConfig&VideoWidget[0].CustomTitle[1].EncodeBlend=false");
                } else {
                    ipCameraHandler.sendHttpGET("/cgi-bin/configManager.cgi?action=setConfig&VideoWidget[0].CustomTitle[1].EncodeBlend=true&VideoWidget[0].CustomTitle[1].Text=" + text);
                }
                break;
            case "CHANNEL_ENABLE_LED":
                ipCameraHandler.setChannelState("CHANNEL_AUTO_LED", "OFF");
                if ("0".equals(command) || "OFF".equals(command)) {
                    ipCameraHandler.sendHttpGET("/cgi-bin/configManager.cgi?action=setConfig&Lighting[0][0].Mode=Off");
                } else if ("ON".equals(command)) {
                    ipCameraHandler.sendHttpGET("/cgi-bin/configManager.cgi?action=setConfig&Lighting[0][0].Mode=Manual");
                } else {
                    ipCameraHandler.sendHttpGET("/cgi-bin/configManager.cgi?action=setConfig&Lighting[0][0].Mode=Manual&Lighting[0][0].MiddleLight[0].Light=" + command);
                }
                break;
            case "CHANNEL_AUTO_LED":
                if ("ON".equals(command)) {
                    ipCameraHandler.setChannelState("CHANNEL_ENABLE_LED", "UNDEF");
                    ipCameraHandler.sendHttpGET("/cgi-bin/configManager.cgi?action=setConfig&Lighting[0][0].Mode=Auto");
                }
                break;
            case "CHANNEL_THRESHOLD_AUDIO_ALARM":
                int threshold = Math.round(Float.valueOf(command));
                if (threshold == 0) {
                    ipCameraHandler.sendHttpGET("/cgi-bin/configManager.cgi?action=setConfig&AudioDetect[0].MutationThreold=1");
                } else {
                    ipCameraHandler.sendHttpGET("/cgi-bin/configManager.cgi?action=setConfig&AudioDetect[0].MutationThreold=" + threshold);
                }
                break;
            case "CHANNEL_ENABLE_AUDIO_ALARM":
                if ("ON".equals(command)) {
                    ipCameraHandler.sendHttpGET("/cgi-bin/configManager.cgi?action=setConfig&AudioDetect[0].MutationDetect=true&AudioDetect[0].EventHandler.Dejitter=1");
                } else {
                    ipCameraHandler.sendHttpGET("/cgi-bin/configManager.cgi?action=setConfig&AudioDetect[0].MutationDetect=false");
                }
                break;
            case "CHANNEL_ENABLE_MOTION_ALARM":
                if ("ON".equals(command)) {
                    ipCameraHandler.sendHttpGET("/cgi-bin/configManager.cgi?action=setConfig&MotionDetect[0].Enable=true&MotionDetect[0].EventHandler.Dejitter=1");
                } else {
                    ipCameraHandler.sendHttpGET("/cgi-bin/configManager.cgi?action=setConfig&MotionDetect[0].Enable=false");
                }
                break;
            case "CHANNEL_ACTIVATE_ALARM_OUTPUT":
                if ("ON".equals(command)) {
                    ipCameraHandler.sendHttpGET("/cgi-bin/configManager.cgi?action=setConfig&AlarmOut[0].Mode=1");
                } else {
                    ipCameraHandler.sendHttpGET("/cgi-bin/configManager.cgi?action=setConfig&AlarmOut[0].Mode=0");
                }
                break;
            case "CHANNEL_ACTIVATE_ALARM_OUTPUT2":
                if ("ON".equals(command)) {
                    ipCameraHandler.sendHttpGET("/cgi-bin/configManager.cgi?action=setConfig&AlarmOut[1].Mode=1");
                } else {
                    ipCameraHandler.sendHttpGET("/cgi-bin/configManager.cgi?action=setConfig&AlarmOut[1].Mode=0");
                }
                break;
        }
    }

    public String encodeSpecialChars(String text) {
        String processed = text;
        try {
            processed = URLEncoder.encode(text, "UTF-8").replace("+", "%20");
        } catch (UnsupportedEncodingException e) {
            // Handle exception
        }
        return processed;
    }
}

#integration code

package org.openhab.binding.ipcamera.internal;

import static org.openhab.binding.ipcamera.IpCameraBindingConstants.*;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.List;

import org.eclipse.smarthome.core.library.types.OnOffType;
import org.eclipse.smarthome.core.library.types.PercentType;
import org.eclipse.smarthome.core.types.UnDefType;
import org.openhab.binding.ipcamera.handler.IpCameraHandler;
import org.eclipse.jdt.annotation.NonNullByDefault;
import org.eclipse.smarthome.core.library.types.StringType;
import org.eclipse.smarthome.core.thing.ChannelUID;
import org.eclipse.jdt.annotation.Nullable;
import org.eclipse.smarthome.core.types.Command;

import io.netty.util.ReferenceCountUtil;
import io.netty.channel.ChannelDuplexHandler;
import io.netty.channel.ChannelHandlerContext;


@NonNullByDefault
public class DahuaHandler extends ChannelDuplexHandler {
    private final IpCameraHandler ipCameraHandler;
    private final String nvrChannel;

    public DahuaHandler(IpCameraHandler handler, String nvrChannel) {
        this.ipCameraHandler = handler;
        this.nvrChannel = nvrChannel;
    }

    @Override
    public void channelRead(@Nullable ChannelHandlerContext ctx, @Nullable Object msg) throws Exception {
        if (msg == null || ctx == null) {
            return;
        }

        try {
            String content = msg.toString();
            if (!content.isEmpty()) {
                ipCameraHandler.logger.trace("HTTP Result back from camera is \t:{}:", content);
                handleHttpResponse(content);
            }
        } finally {
            ReferenceCountUtil.release(msg);
        }
    }

    private void handleHttpResponse(String content) {
        handleMotionDetectionState(content);
        handleMotionAlarm(content);
        handleItemTakenAlarm(content);
        handleItemLeftAlarm(content);
        handleLineCrossingAlarm(content);
        handleAudioAlarmState(content);
        handleAudioMutationAlarm(content);
        handleAudioMutationThreshold(content);
        handleFaceDetectionAlarm(content);
        handleParkingAlarm(content);
        handleFieldDetectionAlarm(content);
        handleExternalAlarmInput(content);
        handleExternalAlarmInput2(content);
    }

    private void handleMotionDetectionState(String content) {
        if (content.contains("table.MotionDetect[0].Enable=true")) {
            ipCameraHandler.setChannelState(CHANNEL_ENABLE_MOTION_ALARM, OnOffType.ON);
        } else if (content.contains("table.MotionDetect[" + nvrChannel + "].Enable=false")) {
            ipCameraHandler.setChannelState(CHANNEL_ENABLE_MOTION_ALARM, OnOffType.OFF);
        }
    }

    private void handleMotionAlarm(String content) {
        if (content.contains("Code=VideoMotion;action=Start;index=0")) {
            ipCameraHandler.motionDetected(CHANNEL_MOTION_ALARM);
        } else if (content.contains("Code=VideoMotion;action=Stop;index=0")) {
            ipCameraHandler.noMotionDetected(CHANNEL_MOTION_ALARM);
        }
    }

    private void handleItemTakenAlarm(String content) {
        if (content.contains("Code=TakenAwayDetection;action=Start;index=0")) {
            ipCameraHandler.motionDetected(CHANNEL_ITEM_TAKEN);
        } else if (content.contains("Code=TakenAwayDetection;action=Stop;index=0")) {
            ipCameraHandler.noMotionDetected(CHANNEL_ITEM_TAKEN);
        }
    }

    private void handleItemLeftAlarm(String content) {
        if (content.contains("Code=LeftDetection;action=Start;index=0")) {
            ipCameraHandler.motionDetected(CHANNEL_ITEM_LEFT);
        } else if (content.contains("Code=LeftDetection;action=Stop;index=0")) {
            ipCameraHandler.noMotionDetected(CHANNEL_ITEM_LEFT);
        }
    }

    private void handleLineCrossingAlarm(String content) {
        if (content.contains("Code=CrossLineDetection;action=Start;index=0")) {
            ipCameraHandler.motionDetected(CHANNEL_LINE_CROSSING_ALARM);
        } else if (content.contains("Code=CrossLineDetection;action=Stop;index=0")) {
            ipCameraHandler.noMotionDetected(CHANNEL_LINE_CROSSING_ALARM);
        }
    }

    private void handleAudioAlarmState(String content) {
        if (content.contains("table.AudioDetect[0].MutationDetect=true")) {
            ipCameraHandler.setChannelState(CHANNEL_ENABLE_AUDIO_ALARM, OnOffType.ON);
        } else if (content.contains("table.AudioDetect[0].MutationDetect=false")) {
            ipCameraHandler.setChannelState(CHANNEL_ENABLE_AUDIO_ALARM, OnOffType.OFF);
        }
    }

    private void handleAudioMutationAlarm(String content) {
        if (content.contains("Code=AudioMutation;action=Start;index=0")) {
            ipCameraHandler.audioDetected();
        } else if (content.contains("Code=AudioMutation;action=Stop;index=0")) {
            ipCameraHandler.setChannelState(CHANNEL_AUDIO_ALARM, OnOffType.OFF);
            ipCameraHandler.firstAudioAlarm = false;
            ipCameraHandler.audioAlarmUpdateSnapshot = false;
        }
    }

    private void handleAudioMutationThreshold(String content) {
        if (content.contains("table.AudioDetect[0].MutationThreold=")) {
            String value = ipCameraHandler.returnValueFromString(content, "table.AudioDetect[0].MutationThreold=");
            ipCameraHandler.setChannelState(CHANNEL_THRESHOLD_AUDIO_ALARM, PercentType.valueOf(value));
        }
    }

    private void handleFaceDetectionAlarm(String content) {
        if (content.contains("Code=FaceDetection;action=Start;index=0")) {
            ipCameraHandler.motionDetected(CHANNEL_FACE_DETECTED);
        } else if (content.contains("Code=FaceDetection;action=Stop;index=0")) {
            ipCameraHandler.noMotionDetected(CHANNEL_FACE_DETECTED);
        }
    }

    private void handleParkingAlarm(String content) {
        if (content.contains("Code=ParkingDetection;action=Start;index=0")) {
            ipCameraHandler.motionDetected(CHANNEL_PARKING_ALARM);
        } else if (content.contains("Code=ParkingDetection;action=Stop;index=0")) {
            ipCameraHandler.noMotionDetected(CHANNEL_PARKING_ALARM);
        }
    }

    private void handleFieldDetectionAlarm(String content) {
        if (content.contains("Code=CrossRegionDetection;action=Start;index=0")) {
            ipCameraHandler.motionDetected(CHANNEL_FIELD_DETECTION_ALARM);
        } else if (content.contains("Code=CrossRegionDetection;action=Stop;index=0")) {
            ipCameraHandler.noMotionDetected(CHANNEL_FIELD_DETECTION_ALARM);
        }
    }

    private void handleExternalAlarmInput(String content) {
        if (content.contains("Code=AlarmLocal;action=Start;index=0")) {
            ipCameraHandler.setChannelState(CHANNEL_EXTERNAL_ALARM_INPUT, OnOffType.ON);
        } else if (content.contains("Code=AlarmLocal;action=Stop;index=0")) {
            ipCameraHandler.setChannelState(CHANNEL_EXTERNAL_ALARM_INPUT, OnOffType.OFF);
        }
    }

    private void handleExternalAlarmInput2(String content) {
        if (content.contains("Code=AlarmLocal;action=Start;index=1")) {
            ipCameraHandler.setChannelState(CHANNEL_EXTERNAL_ALARM_INPUT2, OnOffType.ON);
        } else if (content.contains("Code=AlarmLocal;action=Stop;index=1")) {
            ipCameraHandler.setChannelState(CHANNEL_EXTERNAL_ALARM_INPUT2, OnOffType.OFF);
        }
    }

    public String encodeSpecialChars(String text) {
        String processed = text;
        try {
            processed = URLEncoder.encode(text, "UTF-8").replace("+", "%20");
        } catch (UnsupportedEncodingException e) {
            // Handle encoding exception
        }
        return processed;
    }

    public void handleCommand(ChannelUID channelUID, Command command) {
        if (command.toString().equals("REFRESH")) {
            handleRefreshCommand(channelUID);
            return;
        }

        switch (channelUID.getId()) {
            case CHANNEL_TEXT_OVERLAY:
                handleTextOverlayCommand(command);
                break;
            case CHANNEL_API_ACCESS:
                handleApiAccessCommand(command);
                break;
            case CHANNEL_ENABLE_LED:
                handleEnableLedCommand(command);
                break;
            case CHANNEL_AUTO_LED:
                handleAutoLedCommand(command);
                break;
            case CHANNEL_THRESHOLD_AUDIO_ALARM:
                handleThresholdAudioAlarmCommand(command);
                break;
            case CHANNEL_ENABLE_AUDIO_ALARM:
                handleEnableAudioAlarmCommand(command);
                break;
            case CHANNEL_ENABLE_LINE_CROSSING_ALARM:
                handleEnableLineCrossingAlarmCommand(command);
                break;
            case CHANNEL_ENABLE_MOTION_ALARM:
                handleEnableMotionAlarmCommand(command);
                break;
            case CHANNEL_ACTIVATE_ALARM_OUTPUT:
                handleActivateAlarmOutputCommand(command);
                break;
            case CHANNEL_ACTIVATE_ALARM_OUTPUT2:
                handleActivateAlarmOutput2Command(command);
                break;
            // Add more cases for other channel IDs if needed
            default:
                break;
        }
    }

    private void handleRefreshCommand(ChannelUID channelUID) {
        switch (channelUID.getId()) {
            case CHANNEL_THRESHOLD_AUDIO_ALARM:
                ipCameraHandler.sendHttpGET("/cgi-bin/configManager.cgi?action=getConfig&name=AudioDetect[0]");
                break;
            case CHANNEL_ENABLE_AUDIO_ALARM:
                ipCameraHandler.sendHttpGET("/cgi-bin/configManager.cgi?action=getConfig&name=AudioDetect[0]");
                break;
            case CHANNEL_ENABLE_LINE_CROSSING_ALARM:
                ipCameraHandler.sendHttpGET("/cgi-bin/configManager.cgi?action=getConfig&name=CrossLineDetection[0]");
                break;
            case CHANNEL_ENABLE_MOTION_ALARM:
                ipCameraHandler.sendHttpGET("/cgi-bin/configManager.cgi?action=getConfig&name=MotionDetect[0]");
                break;
            // Add more cases for other channel IDs if needed
            default:
                break;
        }
    }

    private void handleTextOverlayCommand(Command command) {
        String text = encodeSpecialChars(command.toString());
        if ("".contentEquals(text)) {
            ipCameraHandler.sendHttpGET("/cgi-bin/configManager.cgi?action=setConfig&VideoWidget[0].CustomTitle[1].EncodeBlend=false");
        } else {
            ipCameraHandler.sendHttpGET("/cgi-bin/configManager.cgi?action=setConfig&VideoWidget[0].CustomTitle[1].EncodeBlend=true&VideoWidget[0].CustomTitle[1].Text=" + text);
        }
    }

    private void handleApiAccessCommand(Command command) {
        if (command.toString() != null) {
            ipCameraHandler.logger.info("API Access was sent this command :{}", command.toString());
            ipCameraHandler.sendHttpGET(command.toString());
            ipCameraHandler.setChannelState(CHANNEL_API_ACCESS, StringType.valueOf(""));
        }
    }

    private void handleEnableLedCommand(Command command) {
        ipCameraHandler.setChannelState(CHANNEL_AUTO_LED, OnOffType.OFF);
        if ("0".equals(command.toString()) || "OFF".equals(command.toString())) {
            ipCameraHandler.sendHttpGET("/cgi-bin/configManager.cgi?action=setConfig&Lighting[0][0].Mode=Off");
        } else if ("ON".equals(command.toString())) {
            ipCameraHandler.sendHttpGET("/cgi-bin/configManager.cgi?action=setConfig&Lighting[0][0].Mode=Manual");
        } else {
            ipCameraHandler.sendHttpGET("/cgi-bin/configManager.cgi?action=setConfig&Lighting[0][0].Mode=Manual&Lighting[0][0].MiddleLight[0].Light=" + command.toString());
        }
    }

    private void handleAutoLedCommand(Command command) {
        if ("ON".equals(command.toString())) {
            ipCameraHandler.setChannelState(CHANNEL_ENABLE_LED, UnDefType.UNDEF);
            ipCameraHandler.sendHttpGET("/cgi-bin/configManager.cgi?action=setConfig&Lighting[0][0].Mode=Auto");
        }
    }

    private void handleThresholdAudioAlarmCommand(Command command) {
        int threshold = Math.round(Float.valueOf(command.toString()));

        if (threshold == 0) {
            ipCameraHandler.sendHttpGET("/cgi-bin/configManager.cgi?action=setConfig&AudioDetect[0].MutationThreold=1");
        } else {
            ipCameraHandler.sendHttpGET("/cgi-bin/configManager.cgi?action=setConfig&AudioDetect[0].MutationThreold=" + threshold);
        }
    }

    private void handleEnableAudioAlarmCommand(Command command) {
        if ("ON".equals(command.toString())) {
            ipCameraHandler.sendHttpGET("/cgi-bin/configManager.cgi?action=setConfig&AudioDetect[0].MutationDetect=true&AudioDetect[0].EventHandler.Dejitter=1");
        } else {
            ipCameraHandler.sendHttpGET("/cgi-bin/configManager.cgi?action=setConfig&AudioDetect[0].MutationDetect=false");
        }
    }

    private void handleEnableLineCrossingAlarmCommand(Command command) {
        if ("ON".equals(command.toString())) {
            ipCameraHandler.sendHttpGET("/cgi-bin/configManager.cgi?action=setConfig&CrossLineDetection[0].CrossLineEnable=true");
        } else {
            ipCameraHandler.sendHttpGET("/cgi-bin/configManager.cgi?action=setConfig&CrossLineDetection[0].CrossLineEnable=false");
        }
    }

    private void handleEnableMotionAlarmCommand(Command command) {
        if ("ON".equals(command.toString())) {
            ipCameraHandler.sendHttpGET("/cgi-bin/configManager.cgi?action=setConfig&MotionDetect[0].MotionDetectEnable=true");
        } else {
            ipCameraHandler.sendHttpGET("/cgi-bin/configManager.cgi?action=setConfig&MotionDetect[0].MotionDetectEnable=false");
        }
    }

    private void handleActivateAlarmOutputCommand(Command command) {
        if ("ON".equals(command.toString())) {
            ipCameraHandler.sendHttpGET("/cgi-bin/decoder_control.cgi?command=1&user=admin&pwd=" + ipCameraHandler.getPassword());
        } else {
            ipCameraHandler.sendHttpGET("/cgi-bin/decoder_control.cgi?command=0&user=admin&pwd=" + ipCameraHandler.getPassword());
        }
    }

    private void handleActivateAlarmOutput2Command(Command command) {
        if ("ON".equals(command.toString())) {
            ipCameraHandler.sendHttpGET("/cgi-bin/decoder_control.cgi?command=2&user=admin&pwd=" + ipCameraHandler.getPassword());
        } else {
            ipCameraHandler.sendHttpGET("/cgi-bin/decoder_control.cgi?command=0&user=admin&pwd=" + ipCameraHandler.getPassword());
        }
    }
}
